
# 18.5s user time, 270ms system time, 43.36M rss, 320.61M vsz
# Current date: Sat Jul 19 14:29:45 2014
# Hostname: ip-172-31-26-61
# Files: /tmp/mysql-slow.log
# Overall: 101.79k total, 48 unique, 1.18k QPS, 1.07x concurrency ________
# Time range: 2014-07-19 14:28:00 to 14:29:26
# Attribute          total     min     max     avg     95%  stddev  median
# ============     ======= ======= ======= ======= ======= ======= =======
# Exec time            92s     3us   233ms   905us   247us     7ms    21us
# Lock time          694ms       0    11ms     6us    47us    48us       0
# Rows sent        137.85k       0     201    1.39    0.99   11.70       0
# Rows examine      52.88M       0  60.49k  544.76    0.99   4.70k       0
# Query size       142.56M      13 1021.73k   1.43k   40.45  37.00k   40.45

# Profile
# Rank Query ID           Response time Calls R/Call V/M   Item
# ==== ================== ============= ===== ====== ===== ===============
#    1 0x4517399CB130EF84 36.1945 39.2%   942 0.0384  0.05 SELECT memos
#    2 0x391C57CEB1157B93 18.7665 20.3%   891 0.0211  0.02 SELECT memos
#    3 0x88929194AB4B746F 10.0245 10.9%   140 0.0716  0.02 INSERT REPLACE UPDATE REPLACE DELETE SELECT UPDATE INSERT SELECT INSERT UPDATE DELETE UPDATE DELETE INSERT UPDATE DELETE SELECT UPDATE DELETE memos
#    4 0xD675B617BD90D308  8.3234  9.0%   174 0.0478  0.00 SELECT memos
#    5 0x8ED61FE2C1C9A2A1  7.1214  7.7% 95261 0.0001  0.00 SELECT users
#    6 0x08E3E2CA950A9030  5.5674  6.0%   942 0.0059  0.02 SELECT memos
#    7 0x2D9FC10839732BB8  4.6427  5.0%   170 0.0273  0.02 SELECT memos
# MISC 0xMISC              1.5795  1.7%  3270 0.0005   0.0 <41 ITEMS>

# Query 1: 15.44 QPS, 0.59x concurrency, ID 0x4517399CB130EF84 at byte 161515542
# Scores: V/M = 0.05
# Time range: 2014-07-19 14:28:18 to 14:29:19
# Attribute    pct   total     min     max     avg     95%  stddev  median
# ============ === ======= ======= ======= ======= ======= ======= =======
# Count          0     942
# Exec time     39     36s    29us   187ms    38ms   116ms    44ms     9ms
# Lock time      6    48ms       0   675us    51us   108us    45us    60us
# Rows sent     43  59.77k       0     100   64.97   97.36   46.45   97.36
# Rows examine  30  16.29M       0  60.49k  17.71k  59.57k  23.49k   1.46k
# Query size     0  81.64k      82      95   88.75   92.72    6.28   92.72
# String:
# Databases    isucon
# Hosts        localhost
# Users        isucon
# Query_time distribution
#   1us
#  10us  ###################################################
# 100us  ##########
#   1ms  ###########################
#  10ms  ################################################################
# 100ms  #########################
#    1s
#  10s+
# Tables
#    SHOW TABLE STATUS FROM `isucon` LIKE 'memos'\G
#    SHOW CREATE TABLE `isucon`.`memos`\G
# EXPLAIN /*!50100 PARTITIONS*/
SELECT * FROM memos WHERE is_private=0 ORDER BY created_at DESC, id DESC LIMIT 100 OFFSET 16000\G
# *************************** 1. row ***************************
#            id: 1
#   select_type: SIMPLE
#         table: memos
#    partitions: NULL
#          type: ALL
# possible_keys: NULL
#           key: NULL
#       key_len: NULL
#           ref: NULL
#          rows: 70876
#         Extra: Using where; Using filesort

# Query 2: 14.61 QPS, 0.31x concurrency, ID 0x391C57CEB1157B93 at byte 152079820
# Scores: V/M = 0.02
# Time range: 2014-07-19 14:28:18 to 14:29:19
# Attribute    pct   total     min     max     avg     95%  stddev  median
# ============ === ======= ======= ======= ======= ======= ======= =======
# Count          0     891
# Exec time     20     19s    27us    98ms    21ms    59ms    22ms    17ms
# Lock time      5    35ms       0   148us    39us   108us    41us    47us
# Rows sent     32  44.71k       0     201   51.39  174.84   61.87    1.96
# Rows examine  33  17.63M       0  40.57k  20.26k  40.32k  20.02k  38.40k
# Query size     0  49.44k      55      57   56.82   56.92    1.00   56.92
# String:
# Databases    isucon
# Hosts        localhost
# Users        isucon
# Query_time distribution
#   1us
#  10us  ###############
# 100us  #########################
#   1ms  ######################
#  10ms  ################################################################
# 100ms  #
#    1s
#  10s+
# Tables
#    SHOW TABLE STATUS FROM `isucon` LIKE 'memos'\G
#    SHOW CREATE TABLE `isucon`.`memos`\G
# EXPLAIN /*!50100 PARTITIONS*/
SELECT * FROM memos WHERE user='301'  ORDER BY created_at\G
# *************************** 1. row ***************************
#            id: 1
#   select_type: SIMPLE
#         table: memos
#    partitions: NULL
#          type: ALL
# possible_keys: NULL
#           key: NULL
#       key_len: NULL
#           ref: NULL
#          rows: 70876
#         Extra: Using where; Using filesort

# Query 3: 11.67 QPS, 0.84x concurrency, ID 0x88929194AB4B746F at byte 122409555
# Scores: V/M = 0.02
# Time range: 2014-07-19 14:28:00 to 14:28:12
# Attribute    pct   total     min     max     avg     95%  stddev  median
# ============ === ======= ======= ======= ======= ======= ======= =======
# Count          0     140
# Exec time     10     10s    32ms   233ms    72ms   128ms    35ms    65ms
# Lock time      0       0       0       0       0       0       0       0
# Rows sent      0       0       0       0       0       0       0       0
# Rows examine   0       0       0       0       0       0       0       0
# Query size    97 138.38M 813.06k 1021.73k 1012.13k 1009.33k  26.04k 1009.33k
# String:
# Databases    isucon
# Hosts        localhost
# Users        isucon
# Query_time distribution
#   1us
#  10us
# 100us
#   1ms
#  10ms  ################################################################
# 100ms  #################
#    1s
#  10s+
# Tables
#    SHOW TABLE STATUS FROM `isucon` LIKE 'memos'\G
#    SHOW CREATE TABLE `isucon`.`memos`\G
INSERT INTO `memos` VALUES (34759,345,'# Glob\n\nMatch files using the patterns the shell uses, like stars and stuff.\n\nThis is a glob implementation in JavaScript.  It uses the `minimatch`\nlibrary to do its matching.\n\n## Attention: node-glob users!\n\nThe API has changed dramatically between 2.x and 3.x. This library is\nnow 100% JavaScript, and the integer flags have been replaced with an\noptions object.\n\nAlso, there\'s an event emitter class, proper tests, and all the other\nthings you\'ve come to expect from node modules.\n\nAnd best of all, no compilation!\n\n## Usage\n\n```javascript\nvar glob = require(\"glob\")\n\n// options is optional\nglob(\"**/*.js\", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is [\"**/*.js\"]\n  // er is an error object or null.\n})\n```\n\n## Features\n\nPlease see the [minimatch\ndocumentation](https://github.com/isaacs/minimatch) for more details.\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* \"Globstar\" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n* [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## glob(pattern, [options], cb)\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* `cb` {Function}\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nPerform an asynchronous glob search.\n\n## glob.sync(pattern, [options])\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* return: {Array<String>} filenames found matching the pattern\n\nPerform a synchronous glob search.\n\n## Class: glob.Glob\n\nCreate a Glob object by instanting the `glob.Glob` class.\n\n```javascript\nvar Glob = require(\"glob\").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\nIt\'s an EventEmitter, and starts walking the filesystem to find matches\nimmediately.\n\n### new glob.Glob(pattern, [options], [cb])\n\n* `pattern` {String} pattern to search for\n* `options` {Object}\n* `cb` {Function} Called when an error occurs, or matches are found\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nNote that if the `sync` flag is set in the options, then matches will\nbe immediately available on the `g.found` member.\n\n### Properties\n\n* `minimatch` The minimatch object that the glob uses.\n* `options` The options object passed in.\n* `error` The error encountered.  When an error is encountered, the\n  glob object is in an undefined state, and should be discarded.\n* `aborted` Boolean which is set to true when calling `abort()`.  There\n  is no way at this time to continue a glob search after aborting, but\n  you can re-use the statCache to avoid having to duplicate syscalls.\n* `statCache` Collection of all the stat results the glob search\n  performed.\n* `cache` Convenience object.  Each field has the following possible\n  values:\n  * `false` - Path does not exist\n  * `true` - Path exists\n  * `1` - Path exists, and is not a directory\n  * `2` - Path exists, and is a directory\n  * `[file, entries, ...]` - Path exists, is a directory, and the\n    array value is the results of `fs.readdir`\n\n### Events\n\n* `end` When the matching is finished, this is emitted with all the\n  matches found.  If the `nonull` option is set, and no match was found,\n  then the `matches` list contains the original pattern.  The matches\n  are sorted, unless the `nosort` flag is set.\n* `match` Every time a match is found, this is emitted with the matched.\n* `error` Emitted when an unexpected error is encountered, or whenever\n  any fs error occurs if `options.strict` is set.\n* `abort` When `abort()` is called, this event is raised.\n\n### Methods\n\n* `abort` Stop the search.\n\n### Options\n\nAll the options that can be passed to Minimatch can also be passed to\nGlob to change pattern matching behavior.  Also, some have been added,\nor have glob-specific ramifications.\n\nAll options are false by default, unless otherwise noted.\n\nAll options are added to the glob object, as well.\n\n* `cwd` The current working directory in which to search.  Defaults\n  to `process.cwd()`.\n* `root` The place where patterns starting with `/` will be mounted\n  onto.  Defaults to `path.resolve(options.cwd, \"/\")` (`/` on Unix\n  systems, and `C:\\` or some such on Windows.)\n* `dot` Include `.dot` files in normal matches and `globstar` matches.\n  Note that an explicit dot in a portion of the pattern will always\n  match dot files.\n* `nomount` By default, a pattern starting with a forward-slash will be\n  \"mounted\" onto the root setting, so that a valid filesystem path is\n  returned.  Set this flag to disable that behavior.\n* `mark` Add a `/` character to directory matches.  Note that this\n  requires additional stat calls.\n* `nosort` Don\'t sort the results.\n* `stat` Set to true to stat *all* results.  This reduces performance\n  somewhat, and is completely unnecessary, unless `readdir` is presumed\n  to be an untrustworthy indicator of file existence.  It will cause\n  ELOOP to be triggered one level sooner in the case of cyclical\n  symbolic links.\n* `silent` When an unusual error is encountered\n  when attempting to read a directory, a warning will be printed to\n  stderr.  Set the `silent` option to true to suppress these warnings.\n* `strict` When an unusual error is encountered\n  when attempting to read a directory, the process will just continue on\n  in search of other matches.  Set the `strict` option to raise an error\n  in these cases.\n* `cache` See `cache` property above.  Pass in a previously generated\n  cache object to save some fs calls.\n* `statCache` A cache of results of filesystem information, to prevent\n  unnecessary stat calls.  While it should not normally be necessary to\n  set this, you may pass the statCache from one glob() call to the\n  options object of another, if you know that the filesystem will not\n  change between calls.  (See \"Race Conditions\" below.)\n* `sync` Perform a synchronous glob search.\n* `nounique` In some cases, brace-expanded patterns can result in the\n  same file showing up multiple times in the result set.  By default,\n  this implementation prevents duplicates in the result set.\n  Set this flag to disable that behavior.\n* `nonull` Set to never return an empty set, instead returning a set\n  containing the pattern itself.  This is the default in glob(3).\n* `nocase` Perform a case-insensitive match.  Note that case-insensitive\n  filesystems will sometimes result in glob returning results that are\n  case-insensitively matched anyway, since readdir and stat will not\n  raise an error.\n* `debug` Set to enable debug logging in minimatch and glob.\n* `globDebug` Set to enable debug logging in glob, but not minimatch.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between node-glob and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen glob returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`glob.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than\n`\"*a?\"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes will always\nbe interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto the\nroot setting using `path.join`.  On windows, this will by default result\nin `/foo/*` matching `C:\\foo\\bar.txt`.\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race conditions,\nsince it relies on directory walking and such.\n\nAs a result, it is possible that a file that exists when glob looks for\nit may have been deleted or modified by the time it returns the result.\n\nAs part of its internal implementation, this program caches all stat\nand readdir calls that it makes, in order to cut down on system\noverhead.  However, this also makes it even more susceptible to races,\nespecially if the cache or statCache objects are reused between glob\ncalls.\n\nUsers are thus advised not to use a glob result as a guarantee of\nfilesystem state in the face of rapid changes.  For the vast majority\nof operations, this is never a problem.\n',1,'2013-10-04 06:18:31','2013-10-04 11:39:43') /*... omitted ...*/\G

# Query 4: 2.95 QPS, 0.14x concurrency, ID 0xD675B617BD90D308 at byte 158154257
# Scores: V/M = 0.00
# Time range: 2014-07-19 14:28:18 to 14:29:17
# Attribute    pct   total     min     max     avg     95%  stddev  median
# ============ === ======= ======= ======= ======= ======= ======= =======
# Count          0     174
# Exec time      9      8s    17ms   119ms    48ms    75ms    15ms    46ms
# Lock time      1    11ms    45us   143us    60us    69us     9us    57us
# Rows sent     12  17.64k       1     200  103.79  183.58   52.59   92.72
# Rows examine  12   6.86M  40.23k  40.56k  40.39k  40.32k     171  40.32k
# Query size     0  18.15k     105     107  106.79  102.22       0  102.22
# String:
# Databases    isucon
# Hosts        localhost
# Users        isucon
# Query_time distribution
#   1us
#  10us
# 100us
#   1ms
#  10ms  ################################################################
# 100ms  #
#    1s
#  10s+
# Tables
#    SHOW TABLE STATUS FROM `isucon` LIKE 'memos'\G
#    SHOW CREATE TABLE `isucon`.`memos`\G
# EXPLAIN /*!50100 PARTITIONS*/
SELECT id, content, is_private, created_at, updated_at FROM memos WHERE user='263' ORDER BY created_at DESC\G
# *************************** 1. row ***************************
#            id: 1
#   select_type: SIMPLE
#         table: memos
#    partitions: NULL
#          type: ALL
# possible_keys: NULL
#           key: NULL
#       key_len: NULL
#           ref: NULL
#          rows: 70876
#         Extra: Using where; Using filesort

# Query 5: 1.56k QPS, 0.12x concurrency, ID 0x8ED61FE2C1C9A2A1 at byte 157461075
# Scores: V/M = 0.00
# Time range: 2014-07-19 14:28:18 to 14:29:19
# Attribute    pct   total     min     max     avg     95%  stddev  median
# ============ === ======= ======= ======= ======= ======= ======= =======
# Count         93   95261
# Exec time      7      7s    12us    25ms    74us   204us   267us    20us
# Lock time     60   423ms       0    11ms     4us    42us    48us       0
# Rows sent      5   8.00k       0       1    0.09    0.99    0.28       0
# Rows examine   0   8.00k       0       1    0.09    0.99    0.28       0
# Query size     2   3.70M      39      41   40.73   40.45    0.77   40.45
# String:
# Databases    isucon
# Hosts        localhost
# Users        isucon
# Query_time distribution
#   1us
#  10us  ################################################################
# 100us  #######################
#   1ms  #
#  10ms  #
# 100ms
#    1s
#  10s+
# Tables
#    SHOW TABLE STATUS FROM `isucon` LIKE 'users'\G
#    SHOW CREATE TABLE `isucon`.`users`\G
# EXPLAIN /*!50100 PARTITIONS*/
SELECT username FROM users WHERE id='400'\G
# *************************** 1. row ***************************
#            id: 1
#   select_type: SIMPLE
#         table: users
#    partitions: NULL
#          type: const
# possible_keys: PRIMARY
#           key: PRIMARY
#       key_len: 4
#           ref: const
#          rows: 1
#         Extra: NULL

# Query 6: 15.44 QPS, 0.09x concurrency, ID 0x08E3E2CA950A9030 at byte 147107484
# Scores: V/M = 0.02
# Time range: 2014-07-19 14:28:18 to 14:29:19
# Attribute    pct   total     min     max     avg     95%  stddev  median
# ============ === ======= ======= ======= ======= ======= ======= =======
# Count          0     942
# Exec time      6      6s    16us    62ms     6ms    30ms    12ms    26us
# Lock time      2    14ms       0   550us    15us    80us    33us       0
# Rows sent      0     199       0       1    0.21    0.99    0.40       0
# Rows examine  14   7.83M       0  40.38k   8.51k  40.32k  15.95k       0
# Query size     0  46.00k      50      50      50      50       0      50
# String:
# Databases    isucon
# Hosts        localhost
# Users        isucon
# Query_time distribution
#   1us
#  10us  ################################################################
# 100us  #
#   1ms
#  10ms  #################
# 100ms
#    1s
#  10s+
# Tables
#    SHOW TABLE STATUS FROM `isucon` LIKE 'memos'\G
#    SHOW CREATE TABLE `isucon`.`memos`\G
# EXPLAIN /*!50100 PARTITIONS*/
SELECT count(*) AS c FROM memos WHERE is_private=0\G
# *************************** 1. row ***************************
#            id: 1
#   select_type: SIMPLE
#         table: memos
#    partitions: NULL
#          type: ALL
# possible_keys: NULL
#           key: NULL
#       key_len: NULL
#           ref: NULL
#          rows: 70876
#         Extra: Using where

# Query 7: 2.88 QPS, 0.08x concurrency, ID 0x2D9FC10839732BB8 at byte 146095890
# Scores: V/M = 0.02
# Time range: 2014-07-19 14:28:19 to 14:29:18
# Attribute    pct   total     min     max     avg     95%  stddev  median
# ============ === ======= ======= ======= ======= ======= ======= =======
# Count          0     170
# Exec time      5      5s    28us    80ms    27ms    59ms    22ms    33ms
# Lock time      1    10ms       0   141us    57us   119us    45us    73us
# Rows sent      4   5.75k       0     103   34.62   88.31   34.47   26.08
# Rows examine   8   4.26M       0  40.46k  25.63k  40.32k  19.13k  38.40k
# Query size     0  12.09k      71      73   72.80   72.65       1   72.65
# String:
# Databases    isucon
# Hosts        localhost
# Users        isucon
# Query_time distribution
#   1us
#  10us  #####################
# 100us  ##############
#   1ms  #
#  10ms  ################################################################
# 100ms
#    1s
#  10s+
# Tables
#    SHOW TABLE STATUS FROM `isucon` LIKE 'memos'\G
#    SHOW CREATE TABLE `isucon`.`memos`\G
# EXPLAIN /*!50100 PARTITIONS*/
SELECT * FROM memos WHERE user='354' AND is_private=0 ORDER BY created_at\G
# *************************** 1. row ***************************
#            id: 1
#   select_type: SIMPLE
#         table: memos
#    partitions: NULL
#          type: ALL
# possible_keys: NULL
#           key: NULL
#       key_len: NULL
#           ref: NULL
#          rows: 70876
#         Extra: Using where; Using filesort
